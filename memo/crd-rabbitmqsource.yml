apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
    kubectl.kubernetes.io/last-applied-configuration: '{"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.8.0"},"creationTimestamp":null,"name":"rabbitmqsources.sources.knative.dev"},"spec":{"group":"sources.knative.dev","names":{"categories":["all","knative","eventing","sources","importers"],"kind":"RabbitmqSource","listKind":"RabbitmqSourceList","plural":"rabbitmqsources","shortNames":["rmqsource"],"singular":"rabbitmqsource"},"scope":"Namespaced","versions":[{"name":"v1alpha1","schema":{"openAPIV3Schema":{"description":"RabbitmqSource
      is the Schema for the rabbitmqsources API.","properties":{"apiVersion":{"description":"APIVersion
      defines the versioned schema of this representation of an object. Servers should
      convert recognized schemas to the latest internal value, and may reject unrecognized
      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind
      is a string value representing the REST resource this object represents. Servers
      may infer this from the endpoint the client submits requests to. Cannot be updated.
      In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"properties":{"delivery":{"description":"Delivery
      stores the backoff strategy and retry configuration for the RabbitMQ Source.","properties":{"backoffDelay":{"description":"BackoffDelay
      is the delay before retrying in time.Duration format. For linear policy, backoff
      delay is backoffDelay*<numberOfRetries>. For exponential policy, backoff delay
      is backoffDelay*2^<numberOfRetries>.","type":"string"},"backoffPolicy":{"description":"BackoffPolicy
      is the retry backoff policy (linear, exponential).","type":"string"},"retry":{"description":"Retry
      is the minimum number of retries the sender should attempt when sending an event
      before moving it to the dead letter sink.","format":"int32","type":"integer"}},"type":"object"},"rabbitmqClusterReference":{"description":"RabbitmqClusterReference
      stores a reference to RabbitmqCluster. This will get used to create resources
      on the RabbitMQ Broker.","properties":{"connectionSecret":{"description":"Secret
      contains the http management uri for the RabbitMQ cluster. The Secret must contain
      the key `uri`, `username` and `password`. It may optionally contain port or
      will be defaulted to 5672. Have to set either name or connectionSecret, but
      not both.","properties":{"name":{"description":"Name of the referent. More info:
      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
      TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"}},"type":"object"},"name":{"description":"The
      name of the RabbitMQ cluster to reference. Have to set either name or connectionSecret,
      but not both.","type":"string"},"namespace":{"description":"The namespace of
      the RabbitMQ cluster to reference. Defaults to the namespace of the requested
      resource if omitted.","type":"string"}},"type":"object"},"rabbitmqResourcesConfig":{"description":"rabbitmqResourcesConfig
      stores all the configuration parameters related to RabbitMQ resources created
      by the Source.","properties":{"exchangeName":{"description":"Name of the exchange;
      Required when predeclared is false.","type":"string"},"parallelism":{"default":1,"description":"Sets
      the Channel''s Prefetch count and number of Workers to consume simultaneously
      from it","maximum":1000,"minimum":1,"type":"integer"},"predeclared":{"description":"Predeclared
      defines if channels and queues are already predeclared and shouldn''t be recreated.
      This should be used in case the user does not have permission to declare new
      queues and channels in RabbitMQ cluster","type":"boolean"},"queueName":{"description":"Name
      of the queue to bind to; required value.","type":"string"},"vhost":{"description":"VHost
      is the name of the VHost that will be used to set up our sources","type":"string"}},"type":"object"},"serviceAccountName":{"description":"ServiceAccountName
      is the name of the ServiceAccount that will be used to run the Receive Adapter
      Deployment.","type":"string"},"sink":{"description":"Sink is a reference to
      an object that will resolve to a domain name to use as the sink. Required property.","properties":{"ref":{"description":"Ref
      points to an Addressable.","properties":{"apiVersion":{"description":"API version
      of the referent.","type":"string"},"group":{"description":"Group of the API,
      without the version of the group. This can be used as an alternative to the
      APIVersion, and then resolved using ResolveGroup. Note: This API is EXPERIMENTAL
      and might break anytime. For more details: https://github.com/knative/eventing/issues/5086","type":"string"},"kind":{"description":"Kind
      of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"name":{"description":"Name
      of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"},"namespace":{"description":"Namespace
      of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
      This is optional field, it gets defaulted to the object holding it if left out.","type":"string"}},"required":["kind","name"],"type":"object"},"uri":{"description":"URI
      can be an absolute URL(non-empty scheme and non-empty host) pointing to the
      target or a relative URI. Relative URIs will be resolved using the base URI
      retrieved from Ref.","type":"string"}},"type":"object"}},"required":["rabbitmqClusterReference","sink"],"type":"object"},"status":{"properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations
      is additional Status fields for the Resource to save some additional State as
      well as convey more information to the user. This is roughly akin to Annotations
      on any k8s resource, just the reconciler conveying richer information outwards.","type":"object"},"ceAttributes":{"description":"CloudEventAttributes
      are the specific attributes that the Source uses as part of its CloudEvents.","items":{"description":"CloudEventAttributes
      specifies the attributes that a Source uses as part of its CloudEvents.","properties":{"source":{"description":"Source
      is the CloudEvents source attribute.","type":"string"},"type":{"description":"Type
      refers to the CloudEvent type attribute.","type":"string"}},"type":"object"},"type":"array"},"conditions":{"description":"Conditions
      the latest available observations of a resource''s current state.","items":{"description":"Condition
      defines a readiness condition for a Knative resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties","properties":{"lastTransitionTime":{"description":"LastTransitionTime
      is the last time the condition transitioned from one status to another. We use
      VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic
      differences (all other things held constant).","type":"string"},"message":{"description":"A
      human readable message indicating details about the transition.","type":"string"},"reason":{"description":"The
      reason for the condition''s last transition.","type":"string"},"severity":{"description":"Severity
      with which to treat failures of this type of condition. When this is not specified,
      it defaults to Error.","type":"string"},"status":{"description":"Status of the
      condition, one of True, False, Unknown.","type":"string"},"type":{"description":"Type
      of condition.","type":"string"}},"required":["status","type"],"type":"object"},"type":"array"},"observedGeneration":{"description":"ObservedGeneration
      is the ''Generation'' of the Service that was last processed by the controller.","format":"int64","type":"integer"},"sinkUri":{"description":"SinkURI
      is the current active sink URI that has been configured for the Source.","type":"string"}},"type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}'
  creationTimestamp: "2023-10-17T03:20:03Z"
  generation: 1
  name: rabbitmqsources.sources.knative.dev
  resourceVersion: "1729"
  uid: 900dd4e4-c6fa-4c24-b402-edf511bd5924
spec:
  conversion:
    strategy: None
  group: sources.knative.dev
  names:
    categories:
    - all
    - knative
    - eventing
    - sources
    - importers
    kind: RabbitmqSource
    listKind: RabbitmqSourceList
    plural: rabbitmqsources
    shortNames:
    - rmqsource
    singular: rabbitmqsource
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: RabbitmqSource is the Schema for the rabbitmqsources API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              delivery:
                description: Delivery stores the backoff strategy and retry configuration
                  for the RabbitMQ Source.
                properties:
                  backoffDelay:
                    description: BackoffDelay is the delay before retrying in time.Duration
                      format. For linear policy, backoff delay is backoffDelay*<numberOfRetries>.
                      For exponential policy, backoff delay is backoffDelay*2^<numberOfRetries>.
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
              rabbitmqClusterReference:
                description: RabbitmqClusterReference stores a reference to RabbitmqCluster.
                  This will get used to create resources on the RabbitMQ Broker.
                properties:
                  connectionSecret:
                    description: Secret contains the http management uri for the RabbitMQ
                      cluster. The Secret must contain the key `uri`, `username` and
                      `password`. It may optionally contain port or will be defaulted
                      to 5672. Have to set either name or connectionSecret, but not
                      both.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  name:
                    description: The name of the RabbitMQ cluster to reference. Have
                      to set either name or connectionSecret, but not both.
                    type: string
                  namespace:
                    description: The namespace of the RabbitMQ cluster to reference.
                      Defaults to the namespace of the requested resource if omitted.
                    type: string
                type: object
              rabbitmqResourcesConfig:
                description: rabbitmqResourcesConfig stores all the configuration
                  parameters related to RabbitMQ resources created by the Source.
                properties:
                  exchangeName:
                    description: Name of the exchange; Required when predeclared is
                      false.
                    type: string
                  parallelism:
                    default: 1
                    description: Sets the Channel's Prefetch count and number of Workers
                      to consume simultaneously from it
                    maximum: 1000
                    minimum: 1
                    type: integer
                  predeclared:
                    description: Predeclared defines if channels and queues are already
                      predeclared and shouldn't be recreated. This should be used
                      in case the user does not have permission to declare new queues
                      and channels in RabbitMQ cluster
                    type: boolean
                  queueName:
                    description: Name of the queue to bind to; required value.
                    type: string
                  vhost:
                    description: VHost is the name of the VHost that will be used
                      to set up our sources
                    type: string
                type: object
              serviceAccountName:
                description: ServiceAccountName is the name of the ServiceAccount
                  that will be used to run the Receive Adapter Deployment.
                type: string
              sink:
                description: Sink is a reference to an object that will resolve to
                  a domain name to use as the sink. Required property.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      group:
                        description: 'Group of the API, without the version of the
                          group. This can be used as an alternative to the APIVersion,
                          and then resolved using ResolveGroup. Note: This API is
                          EXPERIMENTAL and might break anytime. For more details:
                          https://github.com/knative/eventing/issues/5086'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            required:
            - rabbitmqClusterReference
            - sink
            type: object
          status:
            properties:
              annotations:
                additionalProperties:
                  type: string
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  description: CloudEventAttributes specifies the attributes that
                    a Source uses as part of its CloudEvents.
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  description: 'Condition defines a readiness condition for a Knative
                    resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    categories:
    - all
    - knative
    - eventing
    - sources
    - importers
    kind: RabbitmqSource
    listKind: RabbitmqSourceList
    plural: rabbitmqsources
    shortNames:
    - rmqsource
    singular: rabbitmqsource
  conditions:
  - lastTransitionTime: "2023-10-17T03:20:03Z"
    message: no conflicts found
    reason: NoConflicts
    status: "True"
    type: NamesAccepted
  - lastTransitionTime: "2023-10-17T03:20:03Z"
    message: the initial names have been accepted
    reason: InitialNamesAccepted
    status: "True"
    type: Established
  storedVersions:
  - v1alpha1
